
***********************************************************************************88. Merge Sorted Array*************************************************************************************************

************8Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.**************


*******************************************************************************Solution******************************************************************************************


class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
      int i =m-1;
      int j=n-1;
      int k=m+n-1;
      while(j>=0){
        if(i>=0 && nums1[i]>nums2[j]){
            nums1[k]=nums1[i];
            k--;
            i--;
        }
        else{
            nums1[k]=nums2[j];
            k--;
            j--;
        }
      }
    
  }

}

*****************************************************************************8349. Intersection of Two Arrays*******************************************************************
*******8Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.******************
 ********************************************************Solution**************************************************


class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> set1 = new HashSet<>();
        ArrayList<Integer> arry = new ArrayList<>();

        for (int i = 0; i < nums1.length; i++) {
            set1.add(nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            if (set1.contains(nums2[i])) {
                arry.add(nums2[i]);
                set1.remove(nums2[i]); 
            }
        }
        int[] reslt = new int[arry.size()];
        for (int i = 0; i < arry.size(); i++) {
            reslt[i] = arry.get(i);
        }
        return reslt;
    }
}


