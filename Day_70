287. Find the Duplicate Number ///// https://leetcode.com/problems/find-the-duplicate-number/description/
class Solution {
    public int findDuplicate(int[] nums) { 
        HashSet<Integer>s = new HashSet<>();

        int k = 0;

        for(int i=0;i<nums.length;i++){
            s.add(nums[i]);

            if(s.size() == k){
                return nums[i];
            }
            k = s.size();
        }
        return 0;
    }
}
////1539. Kth Missing Positive Number///  https://leetcode.com/problems/kth-missing-positive-number/description/
class Solution {
    public int findKthPositive(int[] arr, int k) {
        int start = 0;
        int end = arr.length;
         
        while (start < end) {
            int mid = start + (end - start) / 2;
            
            if (arr[mid] - mid - 1 < k) {
                start = mid + 1;
            } else {
                end = mid;
            }
        }
        
        return start + k;
    }
}
540. Single Element in a Sorted Array /// https://leetcode.com/problems/single-element-in-a-sorted-array/

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int start = 0, end = nums.length - 1;

        while (start < end) {
            int mid = start+(end-start) / 2;
            if (mid % 2 == 1) {
                mid--;
            }
            if (nums[mid] != nums[mid + 1]){ 
                end = mid;
            }
            else {
                start = mid + 2;
            }
        }

///A. Soft Drinking//  https://codeforces.com/problemset/problem/151/A

import java.util.Scanner;
public class SoftDrinking {
    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);

        int n=sc.nextInt();
        int k=sc.nextInt();
        int l=sc.nextInt();
        int c=sc.nextInt();
        int d=sc.nextInt();
        int p=sc.nextInt();
        int nl=sc.nextInt();
        int np=sc.nextInt();
     
        
        int totaldrnk=k*l;
        int totallimeslice=c*d;
         
        int drinkml=totaldrnk/nl;
        int drinkbylim=totallimeslice;
        int drinksbyslt=p/np;

        int totaldrinks;

        if (drinkml <= drinkbylim && drinkml <= drinksbyslt) {
            totaldrinks = drinkml;
        } else if (drinkbylim <= drinkml && drinkbylim <= drinksbyslt) {
            totaldrinks = drinkbylim;
        } else {
            totaldrinks = drinksbyslt;
        }
        totaldrinks= totaldrinks/n;
       System.out.println(totaldrinks);
    }
}

        
        return nums[start];
    }
}
