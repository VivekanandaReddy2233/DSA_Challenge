////1480. Running Sum of 1d Array// 

//////Solution///
class Solution {
    public int[] runningSum(int[] nums) {

       for(int i=1;i<nums.length;i++){
        nums[i]=nums[i-1]+nums[i];
       }
     return nums;
    }
}

/////1470. Shuffle the Array/////////////
class Solution {
    public int[] shuffle(int[] nums, int n) {
        int[] ans = new int[nums.length];
        for (int i = 0; i < n; i++) {
            ans[2 * i] = nums[i];       
            ans[2 * i + 1] = nums[i + n]; 
        }
        return ans;
    }
}
/////////1431. Kids With the Greatest Number of Candies
class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {

        int max=-1;

       for(int i=0;i<candies.length;i++)
       {
        if(candies[i]>max){
        max=candies[i];
        } 
      }
      List<Boolean> rest=new ArrayList<>();
      for(int i=0;i<candies.length;i++){
        if(candies[i]+extraCandies>=max){
            rest.add(true);
        }
        else{
            rest.add(false);
        }
      }
      return rest;
    }
}
/////////1512. Number of Good Pairs
class Solution {
    public int numIdenticalPairs(int[] nums) {
         int count=0;
         for(int i=0;i<nums.length;i++){
            for(int j=1;j<nums.length;j++){
                if((nums[i]==nums[j]) && i<j){
                 count++;
                }
            }
         }
         return count;
    }
}
/////////////////////A. Next Round/////
import java.util.Scanner;
public class NextRound {
   public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    int count=0;
    int n=sc.nextInt();
    int k=sc.nextInt();
     int []ans=new int[n];
    for(int i=0;i<n;i++) ans[i]=sc.nextInt();
        
    for(int i=0;i<n;i++)
    {
        if(ans[i]>=ans[k-1] && ans[i]!=0)
        {
            count++;
        }
 
    }
    System.out.println(count);
   } 
}
////////////////////A. Domino piling///////
import java.util.Scanner;
public class DominoPilling {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int M=sc.nextInt();
        int N=sc.nextInt();
        
        int totalSqr=M*N;
        int Max_sqr=totalSqr/2;
        System.out.println(Max_sqr);
    }
}

/////////////////Petya String////

import java.util.Scanner;
 
public class PetyaStrings {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // Read the two strings
        String str1 = sc.nextLine();
        String str2 = sc.nextLine();
        
        // Convert both strings to lowercase
        str1 = str1.toLowerCase();
        str2 = str2.toLowerCase();
        
        // Compare the strings
        int comparisonResult = str1.compareTo(str2);
        
        // Output the result based on the comparison
        if (comparisonResult < 0) {
            System.out.println("-1");
        } else if (comparisonResult > 0) {
            System.out.println("1");
        } else {
            System.out.println("0");
        }
        
        // Close the Scanner
        sc.close();
    }
}
////////////////////A. Helpful Maths////////
import java.util.Scanner;
 
public class HealpFulMaths {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String teach = sc.next(); 
 
        
        int count1 = 0, count2 = 0, count3 = 0;
 
       
        for (char ch : teach.toCharArray()) {
            if (ch == '1') count1++;
            else if (ch == '2') count2++;
            else if (ch == '3') count3++;
        }
 
       
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < count1; i++) result.append("1+");
        for (int i = 0; i < count2; i++) result.append("2+");
        for (int i = 0; i < count3; i++) result.append("3+");
 
        
        if (result.length() > 0 && result.charAt(result.length() - 1) == '+') {
            result.setLength(result.length() - 1);
        }
 
       
        System.out.println(result.toString());
 
        
        sc.close();
    }
}
