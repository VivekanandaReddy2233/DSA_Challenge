A. Again Twenty Five! ////  https://codeforces.com/problemset/problem/630/A

import java.util.Scanner;
public class AgainTwentyFive {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);

     long n=sc.nextLong();

        System.out.println(25);
    }
}


A. Yet Another Two Integers Problem ///  https://codeforces.com/problemset/problem/1409/A

import java.util.Scanner;
public class YetAnotherTwoIntegersProblem {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);

        int n=sc.nextInt();

        for(int i=0;i<n;i++){
            int a=sc.nextInt();
            int b=sc.nextInt();

           int dif;

            if(a>b){
              dif=a-b;
            }else{
                dif=b-a;
            }
            
            int moves=dif/10;
            if(dif%10!=0){
                moves+=1;
            }
            System.out.println(moves);
        }
    }
}
////A. Lucky?///  https://codeforces.com/problemset/problem/1676/A

import java.util.Scanner;

public class Lucky {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        sc.nextLine();

        while (t-- > 0) {
            String str = sc.nextLine(); 

            int sumFirstHalf = (str.charAt(0) - '0') + (str.charAt(1) - '0') + (str.charAt(2) - '0');
            int sumSecondHalf = (str.charAt(3) - '0') + (str.charAt(4) - '0') + (str.charAt(5) - '0');

            if (sumFirstHalf == sumSecondHalf) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }
}
875. Koko Eating Bananas /// https://leetcode.com/problems/koko-eating-bananas/description/
class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int left = 1;
        int right = getMax(piles);
        
        while (left < right) {
            int mid = left + (right - left) / 2;  
            
            if (canFinish(piles, mid, h)) {
                right = mid; 
            } else {
                left = mid + 1; 
            }
        }
        
        return left; 
    }
   
    private int getMax(int[] piles) {
        int max = 0;
        for (int pile : piles) {
            max = Math.max(max, pile);
        }
        return max;
    }
    
    private boolean canFinish(int[] piles, int speed, int h) {
        int hours = 0;
        for (int pile : piles) {
            hours += (pile + speed - 1) / speed;  
        }
        return hours <= h;
    }
}

