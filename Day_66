/////A. Divisibility Problem/////   //// https://codeforces.com/problemset/problem/1328/A //

import java.util.Scanner;
public class DivisibilityProblem {
    public static void main(String[] args) {
        
        Scanner sc= new Scanner(System.in);
 
        int t=sc.nextInt();
        while(t-- > 0){
            long a=sc.nextLong();
            long b=sc.nextLong();
             
            long remin=a%b;
            if( remin==0){
                System.out.println(0);
            }
            else{
                long rslt= b-remin;
                System.out.println(rslt);
            }
        }
    }
}
/////////////A. I Wanna Be the Guy/////   https://codeforces.com/problemset/problem/469/A

import java.util.Scanner;
import java.util.HashSet;
 
public class WannaBeTheGuy {
    public static void main(String[] args) {
 
        Scanner sc = new Scanner(System.in); 
 
        int n = sc.nextInt(); 
        HashSet<Integer> levels = new HashSet<>(); 
       
        int p = sc.nextInt();
        for (int i = 0; i < p; i++) {
            levels.add(sc.nextInt());
        }
 
       
        int q = sc.nextInt();
        for (int i = 0; i < q; i++) {
            levels.add(sc.nextInt());
        }
 
        
        if (levels.size() == n) {
            System.out.println("I become the guy.");
        } else {
            System.out.println("Oh, my keyboard!");
        }
 
        sc.close(); 
    }
}

/////704. Binary Search///  https://leetcode.com/problems/binary-search/description/

class Solution {
    public int search(int[] nums, int target) {
    
     
      int start=0;
      int end=nums.length-1;


    while(start<=end){

         int mid= start+(end-start)/2;
       
        if(nums[mid]==target){
            return mid;
        }
        if(nums[mid]<target){
            start=mid+1;
        }
        else{
            end=mid-1;
        }
        
      }
      return -1;
      }
}
////69. Sqrt(x)////  https://leetcode.com/problems/sqrtx/submissions/1389485638/
class Solution {
    public int mySqrt(int x) {
        if (x == 0) return 0; 

        int start = 1, end = x;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (mid == x / mid) {
                return mid;
            } else if (mid < x / mid) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

        return end; 
    }
} 
374. Guess Number Higher or Lower ///https://leetcode.com/problems/guess-number-higher-or-lower/description/


