///////////////A. Presents/////////////////    https://codeforces.com/problemset/problem/136/A
import java.util.Scanner;
public class APresents {
    public static void main(String[] args) {
           Scanner sc=new Scanner(System.in);

           int n=sc.nextInt();
           int [] reciver =new int[n];

           for(int i=0;i<n;i++){
            int givengifts=sc.nextInt();
            reciver[givengifts-1]=i+1;
           }
           for(int i=0;i<n;i++){
            System.out.println(reciver[i]+" ");
           }
    }
}
///////A. Hulk///////   https://codeforces.com/problemset/problem/705/A

import java.util.Scanner;
 
public class AHulk {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
 
        int n=sc.nextInt();
       
        StringBuilder str=new StringBuilder();
 
        for (int i = 1; i <= n; i++) {
            if (i % 2 == 1) {
                str.append("I hate");
            } else {
                str.append("I love");
            }
            
            if (i != n) {
                str.append(" that ");
            } else {
                str.append(" it");
            }
        }
 
        System.out.println(str);
    }
}
/////////238. Product of Array Except Self//////////////////////  https://leetcode.com/problems/product-of-array-except-self/description/
class Solution {
    public int[] productExceptSelf(int[] nums) {

       int n = nums.length;
    int[] ans = new int[n];
    
    ans[0] = 1;

    for (int i = 1; i < n; i++) {
      ans[i] = ans[i - 1] * nums[i - 1];
    }

    int rightProduct = 1;

    for (int i = n - 1; i >= 0; i--) {
      ans[i] = ans[i] * rightProduct;
      rightProduct *= nums[i];
    }

    return ans; 
    }
}
/////66. Plus One//////   https://leetcode.com/problems/plus-one/description/

class Solution {
    public int[] plusOne(int[] digits) {
        
    for(int i=digits.length-1;i>=0;i--){
        if(digits[i]<9){
            digits[i]++;
            return digits;
        }
        digits[i]=0;
    }
    digits=new int[digits.length+1];
    digits[0]=1;
    return digits;
    }
}
