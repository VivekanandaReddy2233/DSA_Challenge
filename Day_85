Following Directions //// https://codeforces.com/problemset/problem/1791/B
import java.util.Scanner;

public class FollowingDirections {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();  
        while (t-- > 0) {
            int n = scanner.nextInt();  
            String directions = scanner.next();  
            int x = 0, y = 0;  
            
            for (int i = 0; i < n; i++) {
                char direction = directions.charAt(i);
                if (direction == 'L') {
                    x--;
                } else if (direction == 'R') {
                    x++;
                } else if (direction == 'U') {
                    y++;
                } else if (direction == 'D') {
                    y--;
                }
                
                if (x == 1 && y == 1) {
                    System.out.println("YES");
                    break;
                }
            }
            
            if (x != 1 || y != 1) {
                System.out.println("NO");
            }
        }
    }
}


C. Word on the Paper/// https://codeforces.com/problemset/problem/1850/C

import java.util.Scanner;

public class WordonthePaper {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();  
        
        while (t-- > 0) {
            String wrd = "";
            
            for (int i = 0; i < 8; i++) {
                String line = sc.nextLine();  
                
                for (int j = 0; j < 8; j++) {
                    char ch = line.charAt(j);
                    if (ch != '.') {
                        wrd += ch; 
                    }
                }
            }
            System.out.println(wrd);  
        }
        
        sc.close();
    }
}
45. Jump Game II // https://leetcode.com/problems/jump-game-ii/description/?envType=study-plan-v2&envId=top-interview-150
class Solution {
    public int jump(int[] nums) {
        if(nums.length == 1){
            return 0;
        }

        int n = nums.length;
        int maxgoindex =0;
        int current =0;
        int jump = 0;

        for(int i=0;i<n;i++){

            maxgoindex = Math.max(maxgoindex, i+nums[i]);

            if(i == current){
                jump++;
                current = maxgoindex;
            }

            if(current >= n-1){
                break;
            }
        }
        return jump;
    }
}
