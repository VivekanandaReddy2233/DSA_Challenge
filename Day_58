///////////////A. Word///////////
import java.util.Scanner;
 
public class AWord {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();  
        int lCnt = 0, uCnt = 0;  // 
        
        for (int i = 0; i < str.length(); i++) {
            if (Character.isLowerCase(str.charAt(i))) {
                lCnt++;
            } else if (Character.isUpperCase(str.charAt(i))) {
                uCnt++;
            }
        }
 
       
        if (uCnt > lCnt) {
            System.out.println(str.toUpperCase());  
        } else {
            System.out.println(str.toLowerCase());  
        }
    }
}
////////////////////////A. Wrong Subtraction////
import java.util.Scanner;
public class AWrongSubtraction {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
   int count=0;
    int n=sc.nextInt();
    int k=sc.nextInt();

     for(int i=0;i<k;i++){
        if(n%10==0){
            n/=10;

        }
        else{
            n--;
        }
     }
    System.out.println(n);
  }  
}

////////////////////////1572. Matrix Diagonal Sum//////////////////////////

class Solution {
    public int diagonalSum(int[][] mat) {
        
     int n=mat.length;

     int count =0;
     for(int i=0;i<n;i++){
        count+=mat[i][i];
        count+=mat[i][n-1-i];
     }  
     if(n%2==1){
        int cntr=n/2;
        count-=mat[cntr][cntr];
     }

      return count;
    }
}
///////////33. Search in Rotated Sorted Array...
class Solution {
    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int mid = (left + right) / 2;

            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] >= nums[left]) {
                if (nums[left] <= target && target <= nums[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else {
                if (nums[mid] <= target && target <= nums[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }

        return -1;        
    }
}

 
 

