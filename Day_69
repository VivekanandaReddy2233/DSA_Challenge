///A. Police Recruits///   https://codeforces.com/problemset/problem/427/A
import java.util.Scanner;
public class PoliceRecruits {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
 
        int n=sc.nextInt();
 
        int crimes=0;
        int officers=0;
 
        for(int i=0;i<n;i++){
            int event=sc.nextInt();
 
            if(event > 0){
                officers+=event;
            }
            else{
                if(officers > 0){
                    officers--;
                }else{
                    crimes++;
                }
            }
        }
        System.out.println(crimes);
    }
}
////A. The New Year: Meeting Friends///   https://codeforces.com/problemset/problem/723/A

import java.util.Arrays;
import java.util.Scanner;;
public class TheNewYearMeetingFriends {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);

       int arr[]=new int[3];
       arr[0]=sc.nextInt();
       arr[1]=sc.nextInt();
       arr[2]=sc.nextInt();

        Arrays.sort(arr);

        int total=(arr[2]-arr[1])+(arr[1]-arr[0]);
        System.out.println(total);

    }
}

////35. Search Insert Position/// https://leetcode.com/problems/search-insert-position/description/

class Solution {
    public int searchInsert(int[] nums, int target) {
          
       int start=0;
       int end=nums.length-1;

       while(start<=end){
        int mid=start+(end-start)/2;

        if(nums[mid]==target){
            return mid;
        }
        else if(nums[mid]>target)
        {
        end=mid-1;
        }
        else{
           start=mid+1;
        }

       }
      return start; 
     
    }   
}
///852. Peak Index in a Mountain Array///    https://leetcode.com/problems/peak-index-in-a-mountain-array/
class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int n=arr.length;
        int low=1;int high=n-2;
        while(low<=high)
        {
            int mid=(low+high)/2;
            
            if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1]){
            return mid;
            } 
            else if(arr[mid-1]<arr[mid]) {
                low=mid+1;
            }
            else {
                high=mid-1;
            }
        }
        return -1;
    }
}


