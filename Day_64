/////////34. Find First and Last Position of Element in Sorted Array/////////   https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/


class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result = {-1, -1}; 
        int start = 0;
        int end = nums.length - 1;

        
        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (nums[mid] == target) {
                result[0] = mid;
                end = mid - 1;
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

        start = 0;
        end = nums.length - 1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (nums[mid] == target) {
                result[1] = mid;
                start = mid + 1; 
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

//////////////198. House Robber/////////////////  https://leetcode.com/problems/house-robber/description/

class Solution {
    public int rob(int[] nums) {
        
     int []arr =new int[nums.length];

     if(nums.length<2){
        return nums[0];
     }
     arr[0]=nums[0];
     arr[1]=Math.max(nums[0],nums[1]);

     for(int i=2;i<nums.length;i++){

        arr[i]=Math.max(arr[i-2]+nums[i],arr[i-1]);
     }
    
        return arr[nums.length-1]; 
    }
}

        return result;
    }
}
/////A. Magnets////  https://codeforces.com/problemset/problem/344/A

import java.util.Scanner;
 
public class Magnets {
 
    public static void main(String[] args) {
 
        Scanner sc = new Scanner(System.in);
 
        int n = sc.nextInt();
        sc.nextLine(); 
        int count = 1;
        String prev = sc.nextLine(); 
 
        for (int i = 1; i < n; i++) { 
            String curnt = sc.nextLine(); 
            if (!curnt.equals(prev)) {
                count++; 
                
            }
            prev = curnt; 
        }
        System.out.println(count);
    }
}
