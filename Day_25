
*********************************************************142. Linked List Cycle II***************************************************************8

*******************************Solution***************************************************************
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
    ListNode slow=head;
    ListNode fast=head;
    while(fast!=null &&fast.next!=null)
    {
         slow=slow.next;

         fast=fast.next.next;

          if(fast==slow)
          {
            break;
          }
     }
     if(fast==null || fast.next==null) return null;
     fast=head;
     while(fast!=slow){
        fast=fast.next;
        slow=slow.next;
     }

 return fast;
    }
}

***************************************************************************328. Odd Even Linked List8********************************************************88
**********************************************solution*******************************************

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head == null) return null;
        if(head.next == null) return head;

        ListNode oddHead = new ListNode(0);
        ListNode evenHead = new ListNode(0); 
        ListNode odd = oddHead;
        ListNode even = evenHead;

        ListNode current = head;

        int i = 1;
        while(current != null){
            if(i % 2 == 0) {
                even.next = current;
                even = even.next;
            } else {
                odd.next = current;
                odd = odd.next;
            }
            current = current.next;
            i++;
        }

        even.next = null;
        odd.next = evenHead.next;

        return oddHead.next;
    }
}
