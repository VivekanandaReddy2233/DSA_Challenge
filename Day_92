A. Pangram ///  https://codeforces.com/problemset/problem/520/A
import java.util.Scanner;
import java.util.HashSet;

public class Pangram {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        sc.nextLine();
        String str=sc.nextLine();
        
        str=str.toLowerCase();

        HashSet<Character> reslt =new HashSet<>();

        for(int i=0;i<n;i++){
            char curnt=str.charAt(i);
             
            if(curnt >= 'a' && curnt <='z'){
                reslt.add(curnt);
            }
        }
        if(reslt.size()==26){
            System.out.println("YES");
        }
        else{
            System.out.println("NO");
        }
    }
}
A. Spy Detected! /// https://codeforces.com/problemset/problem/1512/A

import java.util.Scanner;

public class SpyDetected {
    public static void main(String[] args) {
        Scanner sc= new Scanner(System.in);

        int t=sc.nextInt();
        for(int i=0;i<t;i++){
            int n=sc.nextInt();
             int arr[]=new int[n];
            for(int j=0;j<n;j++){
                
                arr[j]=sc.nextInt();
            }
            int spyIndex = -1;
            
            if (arr[0] != arr[1] && arr[0] != arr[2]) {
                spyIndex = 1;
            } else {
                for (int j = 1; j < n; j++) {
                    if (arr[j] != arr[0]) {
                        spyIndex = j + 1; 
                        break;
                    }
                }
            }
            System.out.println(spyIndex);
        }
    }
}
962. Maximum Width Ramp// https://leetcode.com/problems/maximum-width-ramp/description/?envType=daily-question&envId=2024-10-10
class Solution {
    public int maxWidthRamp(int[] arr) {
        Stack<Integer> stack = new Stack<>();
        
        for (int i = 0; i < arr.length; i++) {
            if (stack.isEmpty() || arr[stack.peek()] > arr[i]) {
                stack.push(i);
            }
        }
        
        int max = 0;
      
        for (int i = arr.length - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] <= arr[i]) {
                max = Math.max(max, i - stack.pop());
            }
        }
        return max;
    }
}
