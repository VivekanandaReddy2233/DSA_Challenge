A. Holiday Of Equality //  https://codeforces.com/problemset/problem/758/A

import java.util.Scanner;

public class HolidayOfEquality {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int count =0;
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
             arr[i]=sc.nextInt();
              
             if(arr[i]>count){
                count =arr[i];
             }
            }
        int totalBurles = 0;
        for (int i = 0; i < n; i++) {
            totalBurles += (count - arr[i]);
        }
        System.out.println(totalBurles);
    }
}
A. Two Vessels//https://codeforces.com/problemset/problem/1872/A
import java.util.Scanner;

public class TwoVessels {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);

        int t=sc.nextInt();
        for(int i=0;i<t;i++){
           int a=sc.nextInt();
           int b=sc.nextInt();
           int c=sc.nextInt();

           int dif;
           if(a>b){
            dif=a-b;
           }
           else{
            dif=b-a;
           }
           if(dif==0){
            System.out.println(0);
           }
           else{
                int fullMoves = dif / (2 * c);
                int remainder = dif % (2 * c);

                int moves = fullMoves;

                if (remainder > 0) {
                    moves++;
                }
                System.out.println(moves);
           }
        }
    }
}

A. Maximum in Table///https://codeforces.com/problemset/problem/509/A
import java.util.Scanner;

public class MaximuminTable {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[][] table = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0) {
                    table[i][j] = 1;
                } else {
                    table[i][j] = table[i-1][j] + table[i][j-1];
                }
            }
        }
        System.out.println(table[n-1][n-1]);
    }
}

16. 3Sum Closest//  https://leetcode.com/problems/3sum-closest/
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int len = nums.length;
        int sum =0;
        int closestSum = nums[0] + nums[1] + nums[2]; 
        for(int i=0; i<len-2; i++){
            for(int j=i+1; j<len-1; j++){
                for(int k=j+1; k<len;  k++){
                    sum = (nums[i]+nums[j]+nums[k]);
                     if (Math.abs(sum - target) < Math.abs(closestSum - target)) {
                        closestSum = sum;
                    }
                }
            }
        }
        return closestSum;
    }
}
