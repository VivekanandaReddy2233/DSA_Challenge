////A. Insomnia cure//// https://codeforces.com/problemset/problem/148/A
import java.util.Scanner;

public class Insomniacure {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);

        int k=sc.nextInt();
        int l=sc.nextInt();
        int m=sc.nextInt();
        int n=sc.nextInt();
        int d=sc.nextInt();
        int hrmdragon=0;

        for(int i=1;i<=d;i++){
            if(i%k==0 ||i%l==0||i%m==0||i%n==0){
                hrmdragon++;
            }
        }
        System.out.println(hrmdragon);
    }
}

////A. Anton and Letters /////  https://codeforces.com/problemset/problem/443/A

import java.util.Scanner;
import java.util.HashSet;
public class AntonandLetters {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);

        String str=sc.nextLine();

        HashSet<Character> reslt=new HashSet<>();

        for(int i=0;i<str.length();i++){
            char ch= str.charAt(i);

            if(ch >='a' && ch<='z'){
                reslt.add(ch);
            }
        }

      System.out.println(reslt.size());
    }
}

/////278. First Bad Version./////  https://leetcode.com/problems/first-bad-version/description/
/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {

         int start=1; 
         int end=n;
         int ans=-1;

         while(start<=end){

            int mid=start+(end-start)/2;

            if(isBadVersion(mid)){
                ans=mid;
              end=mid-1;
            }
            else{
                start=mid+1;
            }
         }
    return ans;
    }
}

////367. Valid Perfect Square////  https://leetcode.com/problems/valid-perfect-square/

class Solution {
    public boolean isPerfectSquare(int num) {
   
      int start=1;
      int end = num/2;
      if(num==1){
        return true;
      }
      while(start<=end){
      int mid = start+(end-start)/2;

        if((long)mid*mid==num){
            return true;
        }else if((long)mid*mid >num){
            end=mid-1;
        }else{
            start=mid+1;
        } 
      
      }
           
     return false;
    }
}




